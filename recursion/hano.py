"""
将Ａ柱子上的盘子通过Ｂ移动到Ｃ柱子上

算法:
1. 将Ａ上的最上面n-1个圆盘通过Ｃ移动到Ｂ上面，然后将Ａ上的最下面一个圆盘移动到C上面

2. 将Ｂ上的最上面n-2个圆盘通过Ｃ移动到Ａ，然后将Ｂ上的最下面一个圆盘移动到Ｃ

3. 重复上面的过程

"""

def move(a, n):
    print("将圆盘 %s 移动到 %s" % (n, a))


def hano(a, b, c, n):
    if n == 1:
        move(c, n)
        return
    else:
        hano(a, c, b, n-1)
        move(c, n)
        hano(b, a, c, n-1)


if __name__ == "__main__":
    """
    递归都能够使用非递归的方法解决(栈)
    
    缺点:
    1.递归本质属于函数嵌套调用，而函数调用有时间和空间的消耗: 
    每一次函数调用，都需要在内存栈中分配空间以保存参数、返回地址以及零时变量，而往栈中压入数据和弹出数据都需要时间消耗
    2.递归中有大量的重复计算，由于其本质是把一个问题分解为两个或者多个小问题，多个小问题存在相互重叠的部分，则存在重复计算
    3. 调用栈可能会溢出
    """
    a, b, c = list("ABC")
    n = 4
    hano(a, b, c, n)
